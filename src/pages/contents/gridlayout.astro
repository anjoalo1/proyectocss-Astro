---
import Articlep from "../../components/Articlep.astro";
import Layout from "../../layouts/Layout.astro";
import Code from "../../components/Code.astro";
import Addimagen from "../../components/Addimagen.astro";
import ImagenAncha from "../../components/ImagenAncha.astro";

const cssLang = "language-css line-numbers";
const htmlLang = "language-html line-numbers";


const grid ={
    codigo1:`
    .grid-container {
  display: grid;
}

    `,
    codigo2:`
    <!-- contenedor padre -->
    <div class="grid-container">

    </div>
	
    `,
    codigo3:`
    .grid-item {
  /* Propiedades para colocar el elemento en la cuadrícula */
}

    `,
    codigo4:`
    <div class="grid-item">

    </div>    
    `,
    codigo5:`
    .grid-container {
  grid-template-columns: 100px 200px 100px;
   /* Define tres columnas con anchos específicos */
  grid-template-rows: 50px 100px;
   /* Define dos filas con alturas específicas */
}

    `,
    codigo6:`
    .grid-container {
  display: grid;
  grid-template-columns: 100px 200px 150px;
}

    `,
    codigo7:`
    .grid-container {
  display: grid;
  grid-template-columns: repeat(3, 1fr);
}

    `,
    codigo8:`
    .grid-container {
  display: grid;
  grid-template-columns: 1fr 2fr auto;
}

    `,
    codigo9:`
    .grid-container {
  display: grid;
  grid-template-columns: 100px 20% 1fr;
}

    `,
    codigo10:`
    .grid-container {
  display: grid;
  grid-template-rows: 100px 200px 150px;
}

    `,
    codigo11:`
    .grid-container {
  display: grid;
  grid-template-rows: repeat(3, 1fr);
}

    `,
    codigo12:`
    .grid-container {
  display: grid;
  grid-template-rows: 1fr 2fr auto;
}

    `,
    codigo13:`
    .grid-container {
  display: grid;
  grid-template-rows: 100px 20% 1fr;
}

    `,
    codigo14:`
    .grid-container {
  display: grid;
  grid-template-columns: minmax(100px, 1fr) minmax(200px, 2fr) minmax(150px, 1fr);
}

    `,
    codigo15:`
    .grid-container {
  display: grid;
  grid-template-columns: max-content 1fr max-content;
}

.grid-item {
  border: 1px solid black;
  padding: 10px;
}

    `,
    codigo16:`
    .grid-container {
  display: grid;
  grid-template-columns: fit-content(100px) 1fr fit-content(200px);
}

.grid-item {
  border: 1px solid black;
  padding: 10px;
}

    `,
    codigo17:`
    .grid-container {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(100px, 1fr));
  gap: 10px;
}

.grid-item {
  border: 1px solid black;
  padding: 10px;
}

    `,
    codigo18:`
    .grid-container {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(100px, 1fr));
  gap: 10px;
}

.grid-item {
  border: 1px solid black;
  padding: 10px;
}

    `,
    codigo19:`
    .grid-container {
  display: grid;
  grid-template-areas:
    "header header header"
    "sidebar main main"
    "footer footer footer";
}

.grid-item {
  padding: 10px;
  border: 1px solid black;
}

.header {
  grid-area: header;
}

.sidebar {
  grid-area: sidebar;
}

.main {
  grid-area: main;
}

.footer {
  grid-area: footer;
}

    `,
    codigo20:`
    <div class="grid-container">
  <div class="grid-item header">Header</div>
  <div class="grid-item sidebar">Sidebar</div>
  <div class="grid-item main">Main Content</div>
  <div class="grid-item footer">Footer</div>
</div>

    `,
    codigo21:`
    <div class="grid-container">
    <div class="item item1">Item 1</div>
    <div class="item item2">Item 2</div>
  </div>
    `,
    codigo22:`
    .grid-container {
  display: grid;
  grid-template-rows: repeat(4, 100px);
   /* 4 filas, cada una de 100px de altura */
  grid-template-columns: repeat(3, 1fr);
   /* 3 columnas, distribuidas igualmente */
  gap: 10px;
   /* Espacio entre las celdas */
}

.item {
  border: 1px solid #333;
  padding: 20px;
  text-align: center;
}

.item1 {
  grid-row-start: 2;
  grid-row-end: 4;
  grid-column-start: 1;
  grid-column-end: 3;
}

.item2 {
  grid-row-start: 1;
  grid-row-end: 2;
  grid-column-start: 2;
  grid-column-end: 4;
}

    `,
    codigo23:`
    .item {
  grid-row: 2 / 4;
   /* El elemento se extiende desde la fila 2 hasta la fila 4 */
}

    `,
    codigo24:`
    .item {
  grid-column: 1 / 3; 
  /* El elemento se extiende desde la columna 1 hasta la columna 3 */
}

    `,
    codigo25:`
    <!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <style>
    .grid-container {
      display: grid;
      grid-template-columns: repeat(4, 1fr);
      grid-template-rows: repeat(5, 100px);
      gap: 10px;
    }

    .item1 {
      grid-row: 2 / 4; /* Ocupa las filas 2 a 3 */
      grid-column: 1 / 3; /* Ocupa las columnas 1 a 2 */
    }

    .item2 {
      grid-row: 3 / 5; /* Ocupa las filas 3 a 4 */
      grid-column: 3 / 5; /* Ocupa las columnas 3 a 4 */
    }
  </style>
</head>
<body>
  <div class="grid-container">
    <div class="item1">Item 1</div>
    <div class="item2">Item 2</div>
    <!-- Otros elementos pueden ir aquí -->
  </div>
</body>
</html>

    `,
    codigo226:`
    `,
    codigo27:`
    `,
}
---

<Layout title="grid layour">
    <main>
        <h1 class="title-h1">GRID LAYOUT</h1>
        <Articlep>
            <h2 class="title-h2">¿Qué es Grid Layout?</h2>
            <p class="parrafo">En CSS, Grid Layout es un sistema de diseño que permite organizar los elementos de una página web en filas y columnas. Con Grid Layout, puedes crear diseños más complejos y flexibles que los que se pueden lograr con métodos más tradicionales, como Float o Flexbox.</p>
            <p class="parrafo">Las características principales de CSS Grid Layout incluyen:</p>


            <p class="parrafo"><strong>Contenedor de Cuadrícula (Grid Container):</strong> Es el elemento que contiene todos los elementos hijos que formarán parte de la cuadrícula. Se declara con la propiedad display: grid.</p>

            <Code codigo={grid.codigo1} typeLan={cssLang}></Code>
            <Code codigo={grid.codigo2} typeLan={htmlLang}></Code>
            
            <p class="parrafo"><strong>Ítems de la Cuadrícula (Grid Items):</strong> Son los elementos hijos del contenedor de la cuadrícula que participan en la disposición de la cuadrícula. Estos elementos se colocan en celdas específicas de la cuadrícula.</p>
            <Code codigo={grid.codigo3} typeLan={cssLang}></Code>
            <Code codigo={grid.codigo4} typeLan={htmlLang}></Code>
            <p class="parrafo">Líneas de Cuadrícula (Grid Lines): Son las líneas que definen los límites de las filas y columnas de la cuadrícula. Pueden ser referenciadas para posicionar elementos.</p>
            <Code codigo={grid.codigo5} typeLan={cssLang}></Code>
            <Addimagen direccion="../../assets/grid_layout_css.svg"></Addimagen>
            <p class="parrafo"><strong>"grid track"</strong> se refiere a una fila o columna individual en una cuadrícula. Estas filas y columnas se crean al definir las propiedades grid-template-rows y grid-template-columns respectivamente</p>
            <p class="parrafo">Grid Track para Filas (grid-template-rows): Cada fila en una cuadrícula se considera un "grid track". </p>
            
            <p class="parrafo">Grid Track para Columnas (grid-template-columns): Similarmente, cada columna en una cuadrícula se considera un "grid track".</p>
            <p class="parrafo"></p>
            <p class="parrafo"></p>
            <p class="parrafo"></p>
            
          </Articlep>
          
          <Articlep>
            <h2 class="title-h2">grid-template-columns</h2>
            <p class="parrafo">La propiedad grid-template-columns se utiliza para definir las columnas de la cuadrícula. Puedes especificar el tamaño de cada columna individualmente o usar funciones como repeat() para repetir el mismo tamaño varias veces. Aquí hay algunos ejemplos:</p>
            <p class="parrafo">Definición de columnas con tamaños específicos:</p>
            <Code codigo={grid.codigo6} typeLan={cssLang}></Code>
            <Addimagen direccion="../../assets/grid_t_c_100_200_150.svg"></Addimagen>
            <p class="parrafo">En este ejemplo, se definen tres columnas con anchos específicos: la primera columna tiene 100 píxeles, la segunda 200 píxeles y la tercera 150 píxeles.</p>
            <p class="parrafo">Uso de la función repeat():</p>
            <Code codigo={grid.codigo7} typeLan={cssLang}></Code>
            <p class="parrafo">La función repeat(3, 1fr) crea tres columnas, cada una con un tamaño igual. La unidad fr significa "fracción" y distribuirá el espacio disponible de manera equitativa entre las tres columnas.</p>
            <p class="parrafo">Columnas con tamaños mixtos y auto:</p>
            <Code codigo={grid.codigo8} typeLan={cssLang}></Code>
            <p class="parrafo">En este caso, la primera columna ocupa una fracción del espacio disponible, la segunda columna ocupa el doble de la fracción de la primera, y la tercera columna se ajusta automáticamente al contenido.</p>
            <p class="parrafo">Uso de valores explícitos y porcentaje:</p>
            <Code codigo={grid.codigo9} typeLan={cssLang}></Code>
            <p class="parrafo">Aquí, la primera columna tiene un ancho fijo de 100 píxeles, la segunda columna ocupa el 20% del ancho total y la tercera columna ocupa el resto del espacio disponible.</p>
          </Articlep>
          <Articlep>
            <h2 class="title-h2">grid-template-rows</h2>
            
            <p class="parrafo">La propiedad grid-template-rows en CSS Grid Layout se utiliza para definir las filas de la cuadrícula. Al igual que grid-template-columns, puedes especificar el tamaño de cada fila individualmente o usar funciones como repeat() para repetir el mismo tamaño varias veces. Aquí hay algunos ejemplos:</p>
            <p class="parrafo">Definición de filas con tamaños específicos:</p>
            <Code codigo={grid.codigo10} typeLan={cssLang}></Code>
            <Addimagen direccion="../../assets/grid_t_r_100_200_150.svg"></Addimagen>
            <p class="parrafo">En este ejemplo, se definen tres filas con alturas específicas: la primera fila tiene 100 píxeles, la segunda 200 píxeles y la tercera 150 píxeles.</p>
            <p class="parrafo">Uso de la función repeat():</p>
            <Code codigo={grid.codigo11} typeLan={cssLang}></Code>
            <p class="parrafo">La función repeat(3, 1fr) crea tres filas, cada una con un tamaño igual. Al igual que en el caso de grid-template-columns, la unidad fr significa "fracción" y distribuirá el espacio disponible de manera equitativa entre las tres filas.</p>
            <p class="parrafo">Filas con tamaños mixtos y auto:</p>
            <Code codigo={grid.codigo12} typeLan={cssLang}></Code>
            <p class="parrafo">En este caso, la primera fila ocupa una fracción del espacio disponible, la segunda fila ocupa el doble de la fracción de la primera, y la tercera fila se ajusta automáticamente al contenido.</p>
            <p class="parrafo">Uso de valores explícitos y porcentaje:</p>
            <Code codigo={grid.codigo13} typeLan={cssLang}></Code>
            <p class="parrafo">Aquí, la primera fila tiene una altura fija de 100 píxeles, la segunda fila ocupa el 20% de la altura total y la tercera fila ocupa el resto del espacio disponible en altura.</p>
            <p class="parrafo"></p>
            
          </Articlep>
          
          <Articlep>
            <h2 class="title-h2">minmax()</h2>
            <p class="parrafo">La función minmax() se utiliza para establecer un rango entre un valor mínimo y máximo para el tamaño de una columna o fila en un diseño de cuadrícula. Esta función toma dos argumentos: el valor mínimo y el valor máximo.</p>
            <p class="parrafo">Ejemplo de uso en una cuadrícula CSS:</p>
            <Code codigo={grid.codigo14} typeLan={cssLang}></Code>
            <p class="parrafo">En este ejemplo, las columnas de la cuadrícula tendrán un tamaño mínimo especificado (100px, 200px, 150px) y un tamaño máximo especificado (1fr, 2fr, 1fr).</p>
            
          </Articlep>
          
          <Articlep>
            <h2 class="title-h2">max-content</h2>
            <p class="parrafo">La propiedad max-content en CSS se utiliza en contextos de diseño de cuadrícula (grid) y de diseño de caja (flexbox). Esta propiedad permite establecer el tamaño máximo de un elemento en función de su contenido, es decir, el elemento se expandirá hasta el tamaño máximo necesario para contener todo su contenido sin que haya desbordamiento</p>
            <p class="parrafo">A continuación, te mostraré un ejemplo de cómo se puede usar max-content en una cuadrícula CSS:</p>
            <Code codigo={grid.codigo15} typeLan={cssLang}></Code>
            <p class="parrafo">En este ejemplo, el contenedor de la cuadrícula (grid-container) tiene tres columnas. La primera y la tercera columna se establecen con un tamaño máximo de acuerdo con su contenido, mientras que la segunda columna se expandirá para llenar el espacio restante disponible en el contenedor (1fr indica que debe ocupar una fracción igual del espacio restante).</p>
            <p class="parrafo">En este ejemplo, las columnas con max-content se expandirán para ajustarse al contenido más largo dentro de esas columnas, mientras que la segunda columna se expandirá para llenar el espacio restante en el contenedor.</p>
            <p class="parrafo">Recuerda que la propiedad max-content no es compatible con todos los navegadores, especialmente versiones más antiguas. Asegúrate de verificar la compatibilidad del navegador si planeas utilizar esta propiedad en tu proyecto.</p>
          </Articlep>
          <Articlep>
            <h2 class="title-h2">fit-content</h2>
            <p class="parrafo">La propiedad fit-content en CSS se utiliza en contextos de diseño de cuadrícula (grid) y de diseño de caja (flexbox). Esta propiedad permite establecer el tamaño de un elemento de acuerdo con su contenido, pero limitando ese tamaño al valor máximo especificado. En otras palabras, el tamaño del elemento será el contenido más el espacio adicional necesario para alcanzar el tamaño máximo definido.</p>
            <p class="parrafo">Aquí tienes una definición y ejemplos de cómo se utiliza fit-content:</p>
            <Code codigo={grid.codigo16} typeLan={cssLang}></Code>
            <p class="parrafo">En este ejemplo, el contenedor de la cuadrícula (grid-container) tiene tres columnas. La primera y la tercera columna se ajustan al tamaño de su contenido, pero se limitan a un máximo de 100px y 200px respectivamente, mientras que la segunda columna se expande para ocupar el espacio restante.</p>
          </Articlep>
          <Articlep>
            <h2 class="title-h2">auto-fill</h2>
            
            <p class="parrafo">La propiedad auto-fill en CSS se utiliza en combinación con el diseño de cuadrícula (grid) para distribuir automáticamente el número máximo de columnas (o filas) que caben en un contenedor según el tamaño especificado de las columnas (o filas). Esta propiedad es especialmente útil cuando no sabes cuántos elementos vas a tener y quieres que se ajusten automáticamente en el contenedor.</p>
            <p class="parrafo">Aquí tienes un ejemplo de cómo se puede utilizar auto-fill en una cuadrícula CSS:</p>
            <Code codigo={grid.codigo17} typeLan={cssLang}></Code>
            <p class="parrafo">En este ejemplo, el contenedor de la cuadrícula (grid-container) tiene un diseño de cuadrícula con columnas generadas automáticamente utilizando auto-fill. La función repeat(auto-fill, minmax(100px, 1fr)) significa que se crearán tantas columnas como quepan en el contenedor, cada una con un tamaño mínimo de 100px y un tamaño máximo de 1fr (una fracción del espacio disponible).</p>
          </Articlep>
          <Articlep>
            <h2 class="title-h2">auto-fit</h2>
            <p class="parrafo">La propiedad auto-fit en CSS se utiliza en combinación con el diseño de cuadrícula (grid). Al igual que auto-fill, auto-fit se utiliza para distribuir automáticamente el número máximo de columnas (o filas) que caben en un contenedor según el tamaño especificado de las columnas (o filas). Sin embargo, hay una diferencia clave entre auto-fit y auto-fill.</p>
            <p class="parrafo">La principal diferencia es cómo manejan el espacio extra o faltante. auto-fill crea todas las filas o columnas posibles, incluso si no hay suficiente contenido para llenarlas todas, lo que puede resultar en filas o columnas vacías. Por otro lado, auto-fit solo crea filas o columnas según sea necesario para llenar el contenedor. Si hay espacio extra, auto-fit se ajusta para llenar ese espacio sin crear filas o columnas adicionales vacías.</p>
            <p class="parrafo">Aquí tienes un ejemplo de cómo se puede utilizar auto-fit en una cuadrícula CSS:</p>
            <Code codigo={grid.codigo18} typeLan={cssLang}></Code>
            <p class="parrafo">En este ejemplo, el contenedor de la cuadrícula (grid-container) utiliza auto-fit en lugar de auto-fill. La función repeat(auto-fit, minmax(100px, 1fr)) significa que se crearán tantas columnas como sea necesario para llenar el contenedor, cada una con un tamaño mínimo de 100px y un tamaño máximo de 1fr.</p>
            <p class="parrafo">Si hay más espacio disponible, las columnas se expandirán automáticamente para llenar ese espacio, sin crear columnas adicionales vacías. Esto es útil cuando deseas que la cuadrícula se ajuste automáticamente al espacio disponible sin crear filas o columnas innecesarias.</p>
          </Articlep>
          
          <Articlep>
            <h2 class="title-h2">grid-template-areas</h2>
            
            <p class="parrafo">La propiedad grid-template-areas en CSS se utiliza en el diseño de cuadrículas (grid) para asignar nombres a áreas específicas dentro de la cuadrícula. Esto facilita la definición de la disposición de los elementos en la cuadrícula mediante la asignación de nombres a las áreas y luego utilizando esos nombres en la propiedad grid-area de los elementos secundarios.</p>
            <p class="parrafo">La sintaxis de grid-template-areas implica especificar una cadena de caracteres que representa la disposición de las áreas en filas y columnas. Cada área se nombra y se representa por una cadena. Los puntos (.) se utilizan para indicar celdas vacías.</p>
            <p class="parrafo">A continuación, te muestro un ejemplo:</p>
            <Code codigo={grid.codigo19} typeLan={cssLang}></Code>
            <Addimagen direccion="../../assets/grid-areas-grid.svg"></Addimagen>
            
            <p class="parrafo">En este ejemplo, el contenedor de la cuadrícula (grid-container) tiene tres filas y tres columnas definidas por grid-template-areas. Las áreas se llaman "header", "sidebar", "main" y "footer". Luego, cada elemento secundario (grid-item) se coloca en una de estas áreas utilizando la propiedad grid-area.</p>
            <Code codigo={grid.codigo20} typeLan={htmlLang}></Code>
            <p class="parrafo">En este caso, la cuadrícula se organiza según las áreas definidas, lo que facilita la creación de diseños complejos y su mantenimiento. Si deseas cambiar la disposición, solo necesitas modificar la propiedad grid-template-areas en lugar de ajustar las propiedades de fila y columna de cada elemento individualmente.</p>
            <Addimagen direccion="../../assets/grid-template-areas.svg"></Addimagen>
          </Articlep>
          <Articlep>
            <h2 class="title-h2">grid-row-start, grid-row-end, grid-column-start y grid-column-end</h2>
            <p class="parrafo">Las propiedades grid-row-start, grid-row-end, grid-column-start y grid-column-end son parte del sistema de diseño de cuadrícula en CSS, específicamente en el módulo Grid Layout. Estas propiedades te permiten definir dónde comienza y termina un elemento en la cuadrícula, tanto en términos de filas como de columnas.</p>
            <ol class="parrafo">
              <li><strong>grid-row-start:</strong> Define en qué fila comienza un elemento en la cuadrícula.</li>
              <li><strong>grid-row-end:</strong> Define en qué fila termina un elemento en la cuadrícula.</li>
              <li><strong>grid-column-start: </strong>Define en qué columna comienza un elemento en la cuadrícula.</li>
              <li><strong>grid-column-end:</strong> Define en qué columna termina un elemento en la cuadrícula.</li>
              
            </ol>
            <p class="parrafo">La numeración de filas y columnas comienza desde 1. También puedes utilizar valores como span para indicar cuántas filas o columnas debería abarcar un elemento.</p>
            <p class="parrafo">Estructura HTML:</p>
            <Code codigo={grid.codigo21} typeLan={htmlLang}></Code>
            <p class="parrafo">Archivo CSS</p>
            <Code codigo={grid.codigo22} typeLan={cssLang}></Code>
            <p class="parrafo">En este ejemplo, el contenedor .grid-container se define como una cuadrícula con 4 filas y 3 columnas. Se establece un espacio de 10px entre las celdas. Los estilos para los elementos .item definen un borde, un relleno y alineación de texto para mejorar la visualización.</p>
            <p class="parrafo">Los estilos específicos para cada elemento (.item1 y .item2) aplican las propiedades grid-row-start, grid-row-end, grid-column-start, y grid-column-end para posicionar los elementos en la cuadrícula de manera deseada.</p>
            <Addimagen direccion="../../assets/grid/grid-col-row.svg"></Addimagen>
            <p class="parrafo">En este ejemplo, hay dos elementos en una cuadrícula con cuatro filas y tres columnas. El primer elemento (Item 1) comienza en la segunda fila, primera columna y termina en la cuarta fila, tercera columna. El segundo elemento (Item 2) comienza en la primera fila, segunda columna y termina en la segunda fila, cuarta columna.</p>
            <p class="parrafo"></p>
          </Articlep>
          <Articlep>
            <h2 class="title-h2">grid-row, grid-column</h2>
            <p class="parrafo">La propiedad grid-row en CSS Grid se utiliza para especificar la ubicación de un elemento en las filas de una cuadrícula. Puede tomar uno o dos valores. Con un solo valor, el elemento se extiende desde esa fila hasta la siguiente. Con dos valores (separados por una barra diagonal /), el primer valor representa la fila de inicio y el segundo valor la fila de fin.</p>
            <Code codigo={grid.codigo23} typeLan={cssLang}></Code>
            <p class="parrafo">La propiedad grid-column en CSS Grid se utiliza para especificar la ubicación de un elemento en las columnas de una cuadrícula. Puede tomar uno o dos valores. Con un solo valor, el elemento se extiende a lo largo de esa columna. Con dos valores (separados por una barra diagonal /), el primer valor representa la columna de inicio y el segundo valor la columna de fin.</p>
            <Code codigo={grid.codigo24} typeLan={cssLang}></Code>
            <p class="parrafo">Aquí tienes un ejemplo con dos elementos (div) utilizando las propiedades grid-row y grid-column en una cuadrícula de 4 columnas y 5 filas:</p>
            <Code codigo={grid.codigo25} typeLan={htmlLang}></Code>
            <p class="parrafo">    La cuadrícula tiene 4 columnas y 5 filas, con un espacio de 10px entre las celdas.
              .item1 ocupa desde la fila 2 hasta la fila 3 y desde la columna 1 hasta la columna 2.
              .item2 ocupa desde la fila 3 hasta la fila 4 y desde la columna 3 hasta la columna 4.</p>
              <Addimagen direccion="../../assets/grid/shor-cut-grid-row-column.svg"></Addimagen>
              <p class="parrafo"></p>
              <p class="parrafo"></p>
              <p class="parrafo"></p>
            </Articlep>
        </main>
      </Layout>